From 2b33f4901332b06ae1c76840830f8134902df750 Mon Sep 17 00:00:00 2001
From: Vincent Vidal <vincent@vidal.pm>
Date: Sun, 23 May 2021 23:27:24 +0200
Subject: [PATCH] iode-snort additions

---
 DnsProxyListener.cpp | 76 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 73 insertions(+), 3 deletions(-)

diff --git a/DnsProxyListener.cpp b/DnsProxyListener.cpp
index 4dfb4a22..fbf9830a 100644
--- a/DnsProxyListener.cpp
+++ b/DnsProxyListener.cpp
@@ -17,6 +17,7 @@
 #include "DnsProxyListener.h"
 
 #include <arpa/inet.h>
+#include <cutils/sockets.h>
 #include <dirent.h>
 #include <errno.h>
 #include <linux/if.h>
@@ -28,6 +29,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <sys/socket.h>
+#include <sys/un.h>
 
 #define LOG_TAG "resolv"
 
@@ -78,6 +80,9 @@ constexpr int MAX_QUERIES_PER_UID = 256;
 
 android::netdutils::OperationLimiter<uid_t> queryLimiter(MAX_QUERIES_PER_UID);
 
+static const sockaddr_un addrBridge = {.sun_family = AF_UNIX,
+                                       .sun_path = "/dev/socket/iode-snort-netd"};
+
 void logArguments(int argc, char** argv) {
     if (!WOULD_LOG(VERBOSE)) return;
     for (int i = 0; i < argc; i++) {
@@ -741,12 +746,77 @@ void DnsProxyListener::GetAddrInfoHandler::run() {
     if (queryLimiter.start(uid)) {
         const char* host = mHost.starts_with('^') ? nullptr : mHost.c_str();
         const char* service = mService.starts_with('^') ? nullptr : mService.c_str();
-        if (evaluate_domain_name(mNetContext, host)) {
-            rv = resolv_getaddrinfo(host, service, mHints.get(), &mNetContext, &result, &event);
+        int sock = -1;
+        bool verdict = true;
+        bool getips = false;
+
+        if ((sock = socket(AF_UNIX, SOCK_SEQPACKET | SOCK_CLOEXEC, 0)) == -1) {
+            LOG(ERROR) << "iode-snort socket error";
+        } else if (const int one = 1;
+                   setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == -1) {
+            LOG(ERROR) << "iode-snort setsockopt error";
+        } else if (connect(sock, reinterpret_cast<const sockaddr*>(&addrBridge),
+                           sizeof(addrBridge)) == -1) {
+            LOG(ERROR) << "iode-snort connect error";
         } else {
-            rv = EAI_SYSTEM;
+            int32_t len = std::strlen(host) + 1;
+            if (write(sock, &len, sizeof(len)) != sizeof(len) || write(sock, host, len) != len ||
+                write(sock, &uid, sizeof(uid)) != sizeof(uid) ||
+                read(sock, &verdict, sizeof(verdict)) != sizeof(verdict) ||
+                read(sock, &getips, sizeof(getips)) != sizeof(getips)) {
+                LOG(ERROR) << "iode-snort socket r/w error";
+                close(sock);
+                sock = -1;
+            }
         }
+
+        if (sock == -1 || verdict || getips) {
+            if (evaluate_domain_name(mNetContext, host)) {  // VV
+                rv = resolv_getaddrinfo(host, service, mHints.get(), &mNetContext, &result, &event);
+            } else {
+                rv = EAI_SYSTEM;
+            }
+        }
+
         queryLimiter.finish(uid);
+
+        if (getips) {
+            int family;
+            if (!rv) {
+                for (addrinfo* p = result; p != NULL; p = p->ai_next) {
+                    family = p->ai_family;
+                    if (p->ai_family == AF_INET) {
+                        sockaddr_in* ipv4 = reinterpret_cast<sockaddr_in*>(p->ai_addr);
+                        if (write(sock, &family, sizeof(family)) != sizeof(family) ||
+                            write(sock, &ipv4->sin_addr, sizeof(ipv4->sin_addr)) !=
+                                    sizeof(ipv4->sin_addr)) {
+                            LOG(ERROR) << "VV ipv4 write error";
+                            break;
+                        }
+                    } else if (p->ai_family == AF_INET6) {
+                        sockaddr_in6* ipv6 = reinterpret_cast<sockaddr_in6*>(p->ai_addr);
+                        if (write(sock, &family, sizeof(family)) != sizeof(family) ||
+                            write(sock, &ipv6->sin6_addr, sizeof(ipv6->sin6_addr)) !=
+                                    sizeof(ipv6->sin6_addr)) {
+                            LOG(ERROR) << "VV ipv6 write error";
+                            break;
+                        }
+                    }
+                }
+            }
+            family = -1;
+            if (write(sock, &family, sizeof(family)) != sizeof(family)) {
+                LOG(ERROR) << "VV family write error";
+            }
+        }
+        if (sock != -1) close(sock);
+        if (!rv && !verdict) {
+            if (result) {
+                freeaddrinfo(result);
+                result = NULL;
+            }
+            rv = EAI_NODATA;
+        }
     } else {
         // Note that this error code is currently not passed down to the client.
         // android_getaddrinfo_proxy() returns EAI_NODATA on any error.
-- 
2.41.0

